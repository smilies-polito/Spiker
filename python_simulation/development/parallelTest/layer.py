#!/Users/alessio/anaconda3/bin/python3

import numpy as np


# Function which updates an entire layer of spiking neurons in parallel. In particular
# it computes the new values of their membrane potentials and generates the output
# spikes in case some of them exceed the threshold.
#
# INPUT PARAMETERS:
#
# 	1) inEvents: NumPy array containing the input of the current layer corresponding
# 	   to the current step.
#
# 	2) layerDict: dictionary containing the parameters of all the neurons inside the
# 	   layer
#
# 	3) dt_tau: parameter that is common to all the neurons inside the network. It
# 	   represents the ratio delta_t/tau, where delta_t is the time duration of
# 	   the elaboration step and tau is time constant of the exponential. Being the
# 	   exponential function comupted step by step this parameter affects its
# 	   steepness. An higher value of delta_t/tau implies a faster decay of the
# 	   exponential function.
#
# 	4) v_reset: voltage at which the membrane potential is reset in case it exceeds
# 	   the threshold.

def updateLayer(inEvents, layerDict, dt_tau, v_reset):

	generateOutputEvents(layerDict)

	resetPotentials(layerDict, v_reset)

	expDecay(layerDict, dt_tau)

	updateMembranePotentials(inEvents, layerDict)
	



# Generate the output spikes for all those neurons whose membrane potential exceeds the
# threshold.
#
# INPUT PARAMETER: layerDict. It is a dictionary containing the parameters of the
# layer, in particular:
#
# 	1) v_mem: NumPy array containing the current value of the membrane potential of
# 	   each neuron in the layer.
#
# 	2) v_th: NumPy array containing the value of the threshold voltage for each
# 	   neuron in the layer. 
#
# 	3) outEvents: boolean NumPy array containing the spikes generated by the layer.

def generateOutputEvents(layerDict):
	layerDict["outEvents"] = layerDict["v_mem"] > layerDict["v_th"]



# Reset the membrane potential of all those neurons whose membrane potential has
# exceeded the threshold. The function gives the possibility to chose the value of the
# reset voltage.
#
# INPUT PARAMETERS:
#
# 	1) layerDict: dictionary containing the parameters of the layer.
#
# 	2) v_reset: value at which the membrane potential is reset.

def resetPotentials(layerDict, v_reset):
	layerDict["v_mem"][layerDict["outEvents"]] = v_reset


# Update the membrane potential of all the neurons inside the layer with an exponential
# decay.
#
# INPUT PARAMENTERS: 
#
# 	1) layerDict: dictionary containing the parameters of the layer, in particular 
# 	   v_mem, NumPy array containing the current value of the membrane potential of 
# 	   each neuron in the layer. 
#
# 	2) dt_tau: parameter that is common to all the neurons inside the network. It
# 	   represents the ratio delta_t/tau, where delta_t is the time duration of
# 	   the elaboration step and tau is time constant of the exponential. Being the
# 	   exponential function comupted step by step this parameter affects its
# 	   steepness. An higher value of delta_t/tau implies a faster decay of the
# 	   exponential function.

def expDecay(layerDict, dt_tau):
	layerDict["v_mem"] = layerDict["v_mem"]-dt_tau*layerDict["v_mem"]


# Update the membrane potential of all those neurons which have received a spike in input.
#
# INPUT PARAMETERS:
#
# 	1) inEvents: boolean NumPy array which contains True whenever a spike has been
# 	   received in the  specific position and False otherwise.
#
# 	2) layerDict: dictionary containing all the parameters of the layer. In particular:
#	
#		a) v_mem: NumPy array containing the current value of the membrane potential of
#		   each neuron inside the layer.
#
# 		b) weights: bidimensional NumPy array which contains the weights of all the
# 		   neurons in the layer. It contains a number of arrays equal to the number of
# 		   neurons inside the layer. Each array contains a number of weights equal to the
# 		   number of input events, that is the number of neurons in the previous layer.

def updateMembranePotentials(inEvents, layerDict):
	layerDict["v_mem"] = layerDict["v_mem"] + np.sum(layerDict["weights"][:,inEvents], 
				axis=1)
