#!/Users/alessio/anaconda3/bin/python3


# Function which models a spiking neuron using the Leaky Integrate And Fire model,
# implementing it in a time-stepped way.
#
# INPUT PARAMETERS:
#
# 	1) inEvents: boolean NumPy array which contains the input events. These can
# 	   represent the spikes that are given to the net from the external wolrd
# 	   or the ones that have been generated by the previous layer of neurons.
#
# 	2) neuronDict: dictionary which contains all the paramenters of the neuron,
# 	   in particular:
# 	   	- v_mem		-> membrane potential
# 	   	- v_th		-> firing threshold
# 	   	- weights	-> NumPy array containing the weights associated
# 	   			   to each neuron
#
# 	3) dt_tau: numerical value which contains the value of delta_t/tau, where
# 	   delta_t is the time interval corresponding to one elaboration step,
# 	   while tau is the time constant of the decreasing exponential. Since the
# 	   exponential decay is computed iteratively at each cycle this parameter
# 	   determines how fast is the decay. An higher value of dt_tau implies a
# 	   faster decreasing of the membrane potential
#
# The function returns a single integer value, either 1 or 0 depending on if the 
# neuron has generated an event in the current step or not.

def neuron(inEvents, neuronDict, dt_tau):

	outEvent = False

	# Generate event
	if neuronDict["v_mem"] > neuronDict["v_th"]:
		neuronDict["v_mem"] = 0
		outEvent = True


	# Exxponential decay
	neuronDict["v_mem"] = expDecay(neuronDict["v_mem"], dt_tau)

	# Input events increase the membrane potential
	neuronDict["v_mem"] = updateMembranePotential(inEvents, neuronDict["weights"], 
				neuronDict["v_mem"])


	return outEvent





# Function which updates the membrane potential with the weights of the
# synapses that have generated an input event.
#
# INPUT PARAMETERS:
#
# 	1) inEvents: boolean NumPy array which contains the input events
#
# 	2) weights: NumPy array with the same size of inEvent, containing
# 	   the weights associated to all the synapses
#
#	3) v_mem: single numerical value which contains the current value
#	   of the membrane potential
#
# The function returns the membrane potential updated with the input
# events.

def updateMembranePotential(inEvents, weights, v_mem):
	return v_mem + sum(weights[inEvents])






# Function which update the membrane potential with one step of exponential
# decay

def expDecay(v_mem, dt_tau):
	return v_mem - dt_tau*v_mem

